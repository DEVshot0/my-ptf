{"ast":null,"code":"var _jsxFileName = \"/home/hshot0/linha/src/components/PowerMeter.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport './PowerMeter.css';\nimport { NightModeContext } from '../contexts/NightModeContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PowerMeter = ({\n  title,\n  level\n}) => {\n  _s();\n  const maxLevel = 6;\n  const [currentLevel, setCurrentLevel] = useState(0);\n  const {\n    ref,\n    inView\n  } = useInView({\n    triggerOnce: true\n  });\n  const {\n    isNightMode\n  } = useContext(NightModeContext);\n  useEffect(() => {\n    let interval;\n    if (inView && currentLevel < level) {\n      interval = setInterval(() => {\n        setCurrentLevel(prev => prev + 1);\n      }, 250);\n    }\n    return () => clearInterval(interval);\n  }, [inView, currentLevel, level]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `power-meter ${isNightMode ? 'night-mode' : ''}`,\n    ref: ref,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"meter\",\n      children: [...Array(maxLevel)].map((_, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `square ${i < currentLevel ? 'filled' : ''} ${i === level - 1 && currentLevel === level ? 'blinking' : ''} ${isNightMode ? 'night-mode' : ''}`\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(PowerMeter, \"RHMszokmzUB4UY78hwMZfkc8zU0=\", false, function () {\n  return [useInView];\n});\n_c = PowerMeter;\nconst PowerMeterList = () => {\n  const meters = [{\n    title: 'HTML',\n    level: 6\n  }, {\n    title: 'CSS',\n    level: 6\n  }, {\n    title: 'JS(ES6)',\n    level: 6\n  }, {\n    title: 'PHP',\n    level: 5\n  }, {\n    title: 'PYTHON',\n    level: 4\n  }, {\n    title: 'NODE',\n    level: 4\n  }, {\n    title: 'C++',\n    level: 4\n  }, {\n    title: 'JAVA',\n    level: 4\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"power-meter-list\",\n    children: meters.map((meter, index) => /*#__PURE__*/_jsxDEV(PowerMeter, {\n      title: meter.title,\n      level: meter.level\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_c2 = PowerMeterList;\nexport default PowerMeterList;\nvar _c, _c2;\n$RefreshReg$(_c, \"PowerMeter\");\n$RefreshReg$(_c2, \"PowerMeterList\");","map":{"version":3,"names":["React","useState","useEffect","useContext","useInView","NightModeContext","jsxDEV","_jsxDEV","PowerMeter","title","level","_s","maxLevel","currentLevel","setCurrentLevel","ref","inView","triggerOnce","isNightMode","interval","setInterval","prev","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","map","_","i","_c","PowerMeterList","meters","meter","index","_c2","$RefreshReg$"],"sources":["/home/hshot0/linha/src/components/PowerMeter.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useInView } from 'react-intersection-observer';\nimport './PowerMeter.css';\nimport { NightModeContext } from '../contexts/NightModeContext';\n\nconst PowerMeter = ({ title, level }) => {\n  const maxLevel = 6; \n  const [currentLevel, setCurrentLevel] = useState(0);\n  const { ref, inView } = useInView({ triggerOnce: true });\n  const { isNightMode } = useContext(NightModeContext);\n\n  useEffect(() => {\n    let interval;\n    if (inView && currentLevel < level) {\n      interval = setInterval(() => {\n        setCurrentLevel((prev) => prev + 1);\n      }, 250);\n    }\n    return () => clearInterval(interval);\n  }, [inView, currentLevel, level]);\n\n  return (\n    <div className={`power-meter ${isNightMode ? 'night-mode' : ''}`} ref={ref}>\n      <h3>{title}</h3>\n      <div className=\"meter\">\n        {[...Array(maxLevel)].map((_, i) => (\n          <div\n            key={i}\n            className={`square ${i < currentLevel ? 'filled' : ''} ${i === level - 1 && currentLevel === level ? 'blinking' : ''} ${isNightMode ? 'night-mode' : ''}`}\n          ></div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst PowerMeterList = () => {\n  const meters = [\n    { title: 'HTML', level: 6 },\n    { title: 'CSS', level: 6 },\n    { title: 'JS(ES6)', level: 6 },\n    { title: 'PHP', level: 5 },\n    { title: 'PYTHON', level: 4 },\n    { title: 'NODE', level: 4 },\n    { title: 'C++', level: 4 },\n    { title: 'JAVA', level: 4 } \n  ];\n\n  return (\n    <div className=\"power-meter-list\">\n      {meters.map((meter, index) => (\n        <PowerMeter key={index} title={meter.title} level={meter.level} />\n      ))}\n    </div>\n  );\n};\n\nexport default PowerMeterList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}